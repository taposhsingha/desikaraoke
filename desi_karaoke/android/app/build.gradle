def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

ext.abiCodes = ['armeabi-v7a': 0, 'arm64-v8a': 1, 'x86_64': 2]

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
    signingConfigs {
        signing {
            storeFile file(DESIKARAOKE_JKS_FILE)
            storePassword ANDROID_STORE_PASSWORD
            keyAlias 'DesiKaraoke'
            keyPassword ANDROID_STORE_PASSWORD
        }
    }

    defaultConfig {
        applicationId "com.desikaraoke.lite"
        minSdkVersion 18
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.signing
        }
        debug {
            signingConfig signingConfigs.signing
        }
        profile {
            signingConfig signingConfigs.signing
        }
    }

    // splits {
    //     abi {
    //         enable true
    //         reset()
    //         include "armeabi-v7a", "arm64-v8a"
    //         universalApk false
    //     }
    // }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode =
                    project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride =
                        baseAbiVersionCode + variant.versionCode
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.amazonaws:aws-android-sdk-s3:2.18.0'
}

apply plugin: 'com.google.gms.google-services'